name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend Tests and Linting
  backend-tests:
    name: Backend Tests & Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      minio:
        image: minio/minio:latest
        env:
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin123
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3
        ports:
          - 9000:9000
          - 9001:9001

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('core-api/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      working-directory: ./core-api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov flake8 black isort bandit safety

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://testuser:testpassword@localhost:5432/testdb" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "MINIO_ENDPOINT=localhost:9000" >> $GITHUB_ENV
        echo "MINIO_ACCESS_KEY=minioadmin" >> $GITHUB_ENV
        echo "MINIO_SECRET_KEY=minioadmin123" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "ENVIRONMENT=test" >> $GITHUB_ENV

    - name: Run database migrations
      working-directory: ./core-api
      run: |
        # Wait for services to be ready
        sleep 10
        # Run migrations if they exist
        if [ -d "alembic" ]; then
          alembic upgrade head
        fi

    - name: Code formatting check (Black)
      working-directory: ./core-api
      run: black --check --diff src/ tests/

    - name: Import sorting check (isort)
      working-directory: ./core-api
      run: isort --check-only --diff src/ tests/

    - name: Linting (flake8)
      working-directory: ./core-api
      run: flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503

    - name: Security check (bandit)
      working-directory: ./core-api
      run: bandit -r src/ -f json -o bandit-report.json || true

    - name: Dependency vulnerability check (safety)
      working-directory: ./core-api
      run: safety check --json --output safety-report.json || true

    - name: Run unit tests with coverage
      working-directory: ./core-api
      run: |
        python -m pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Run integration tests
      working-directory: ./core-api
      run: |
        python -m pytest tests/integration/ -v || true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./core-api/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          core-api/htmlcov/
          core-api/bandit-report.json
          core-api/safety-report.json

  # Frontend Tests and Linting
  frontend-tests:
    name: Frontend Tests & Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Type checking
      working-directory: ./frontend
      run: npm run type-check

    - name: Linting (ESLint)
      working-directory: ./frontend
      run: npm run lint

    - name: Code formatting check (Prettier)
      working-directory: ./frontend
      run: npm run format:check

    - name: Run unit tests
      working-directory: ./frontend
      run: npm run test:ci

    - name: Build application
      working-directory: ./frontend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/.next/

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build and Push
  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/rag-chat-backend
          ${{ secrets.DOCKER_USERNAME }}/rag-chat-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./core-api
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/rag-chat-backend:${{ github.sha }},${{ secrets.DOCKER_USERNAME }}/rag-chat-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/rag-chat-frontend:${{ github.sha }},${{ secrets.DOCKER_USERNAME }}/rag-chat-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run performance tests with k6
      uses: grafana/k6-action@v0.3.1
      with:
        filename: tests/performance/load-test.js
      env:
        K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # For example, using kubectl, helm, or docker-compose

    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test commands here

    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }} 